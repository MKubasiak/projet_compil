
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.ul.miage.exemple.generated;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\005\000\002\002\003\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\017\006\000\002\017\010" +
    "\000\002\017\004\000\002\003\007\000\002\004\007\000" +
    "\002\005\004\000\002\005\006\000\002\006\006\000\002" +
    "\010\011\000\002\011\011\000\002\012\005\000\002\013" +
    "\004\000\002\014\006\000\002\015\005\000\002\016\013" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\036\004\032\005\017\006\026\022\015\024" +
    "\025\025\016\026\021\027\011\031\007\032\010\033\020" +
    "\034\034\035\013\037\022\001\002\000\004\034\150\001" +
    "\002\000\004\034\146\001\002\000\010\002\ufffd\012\ufffd" +
    "\036\ufffd\001\002\000\004\033\145\001\002\000\004\011" +
    "\143\001\002\000\004\006\133\001\002\000\004\034\131" +
    "\001\002\000\036\004\032\005\017\006\026\022\015\024" +
    "\025\025\016\026\021\027\011\031\007\032\010\033\020" +
    "\034\034\035\013\037\022\001\002\000\004\034\124\001" +
    "\002\000\004\023\122\001\002\000\004\011\114\001\002" +
    "\000\004\011\045\001\002\000\036\004\032\005\017\006" +
    "\026\022\015\024\025\025\016\026\021\027\011\031\007" +
    "\032\010\033\020\034\034\035\013\037\022\001\002\000" +
    "\004\022\104\001\002\000\004\011\101\001\002\000\004" +
    "\034\077\001\002\000\004\034\075\001\002\000\004\011" +
    "\067\001\002\000\036\004\032\005\017\006\026\022\015" +
    "\024\025\025\016\026\021\027\011\031\007\032\010\033" +
    "\020\034\034\035\013\037\022\001\002\000\004\034\064" +
    "\001\002\000\004\034\063\001\002\000\004\034\061\001" +
    "\002\000\004\011\045\001\002\000\004\002\044\001\002" +
    "\000\044\002\ufff1\004\032\005\017\006\026\012\ufff1\022" +
    "\015\024\025\025\016\026\021\027\011\031\007\032\010" +
    "\033\020\034\034\035\013\036\ufff1\037\022\001\002\000" +
    "\004\034\041\001\002\000\004\034\037\001\002\000\036" +
    "\004\032\005\017\006\026\022\015\024\025\025\016\026" +
    "\021\027\011\031\007\032\010\033\020\034\034\035\013" +
    "\037\022\001\002\000\010\002\ufffc\012\ufffc\036\ufffc\001" +
    "\002\000\036\004\032\005\017\006\026\022\015\024\025" +
    "\025\016\026\021\027\011\031\007\032\010\033\020\034" +
    "\034\035\013\037\022\001\002\000\010\002\ufff8\012\ufff8" +
    "\036\ufff8\001\002\000\010\002\ufff4\012\ufff4\036\ufff4\001" +
    "\002\000\004\002\001\001\002\000\006\007\052\026\053" +
    "\001\002\000\004\013\047\001\002\000\036\004\032\005" +
    "\017\006\026\022\015\024\025\025\016\026\021\027\011" +
    "\031\007\032\010\033\020\034\034\035\013\037\022\001" +
    "\002\000\004\012\051\001\002\000\004\034\uffed\001\002" +
    "\000\004\013\uffee\001\002\000\004\022\054\001\002\000" +
    "\006\007\055\026\056\001\002\000\004\013\ufff0\001\002" +
    "\000\004\022\057\001\002\000\004\007\060\001\002\000" +
    "\004\013\uffef\001\002\000\036\004\032\005\017\006\026" +
    "\022\015\024\025\025\016\026\021\027\011\031\007\032" +
    "\010\033\020\034\034\035\013\037\022\001\002\000\010" +
    "\002\ufff6\012\ufff6\036\ufff6\001\002\000\010\002\uffff\012" +
    "\uffff\036\uffff\001\002\000\036\004\032\005\017\006\026" +
    "\022\015\024\025\025\016\026\021\027\011\031\007\032" +
    "\010\033\020\034\034\035\013\037\022\001\002\000\010" +
    "\002\ufffa\012\ufffa\036\ufffa\001\002\000\010\002\ufff2\012" +
    "\ufff2\036\ufff2\001\002\000\004\033\070\001\002\000\004" +
    "\007\071\001\002\000\004\013\072\001\002\000\036\004" +
    "\032\005\017\006\026\022\015\024\025\025\016\026\021" +
    "\027\011\031\007\032\010\033\020\034\034\035\013\037" +
    "\022\001\002\000\004\012\074\001\002\000\004\034\uffe8" +
    "\001\002\000\036\004\032\005\017\006\026\022\015\024" +
    "\025\025\016\026\021\027\011\031\007\032\010\033\020" +
    "\034\034\035\013\037\022\001\002\000\010\002\000\012" +
    "\000\036\000\001\002\000\036\004\032\005\017\006\026" +
    "\022\015\024\025\025\016\026\021\027\011\031\007\032" +
    "\010\033\020\034\034\035\013\037\022\001\002\000\010" +
    "\002\ufffb\012\ufffb\036\ufffb\001\002\000\004\033\102\001" +
    "\002\000\004\007\103\001\002\000\004\034\uffe4\001\002" +
    "\000\006\023\105\034\uffeb\001\002\000\004\033\106\001" +
    "\002\000\004\034\uffea\001\002\000\010\002\ufff3\012\ufff3" +
    "\036\ufff3\001\002\000\004\013\111\001\002\000\036\004" +
    "\032\005\017\006\026\022\015\024\025\025\016\026\021" +
    "\027\011\031\007\032\010\033\020\034\034\035\013\037" +
    "\022\001\002\000\004\012\113\001\002\000\004\034\uffec" +
    "\001\002\000\004\033\115\001\002\000\004\007\116\001" +
    "\002\000\004\013\117\001\002\000\036\004\032\005\017" +
    "\006\026\022\015\024\025\025\016\026\021\027\011\031" +
    "\007\032\010\033\020\034\034\035\013\037\022\001\002" +
    "\000\004\012\121\001\002\000\004\034\uffe7\001\002\000" +
    "\004\033\123\001\002\000\004\034\uffe6\001\002\000\036" +
    "\004\032\005\017\006\026\022\015\024\025\025\016\026" +
    "\021\027\011\031\007\032\010\033\020\034\034\035\013" +
    "\037\022\001\002\000\010\002\ufff7\012\ufff7\036\ufff7\001" +
    "\002\000\004\036\127\001\002\000\036\004\032\005\017" +
    "\006\026\022\015\024\025\025\016\026\021\027\011\031" +
    "\007\032\010\033\020\034\034\035\013\037\022\001\002" +
    "\000\010\002\uffe9\012\uffe9\036\uffe9\001\002\000\036\004" +
    "\032\005\017\006\026\022\015\024\025\025\016\026\021" +
    "\027\011\031\007\032\010\033\020\034\034\035\013\037" +
    "\022\001\002\000\010\002\ufff5\012\ufff5\036\ufff5\001\002" +
    "\000\004\026\134\001\002\000\004\006\135\001\002\000" +
    "\004\033\136\001\002\000\004\011\045\001\002\000\004" +
    "\013\140\001\002\000\036\004\032\005\017\006\026\022" +
    "\015\024\025\025\016\026\021\027\011\031\007\032\010" +
    "\033\020\034\034\035\013\037\022\001\002\000\004\012" +
    "\142\001\002\000\004\034\uffe2\001\002\000\004\007\144" +
    "\001\002\000\004\034\uffe3\001\002\000\004\034\uffe5\001" +
    "\002\000\036\004\032\005\017\006\026\022\015\024\025" +
    "\025\016\026\021\027\011\031\007\032\010\033\020\034" +
    "\034\035\013\037\022\001\002\000\010\002\ufff9\012\ufff9" +
    "\036\ufff9\001\002\000\036\004\032\005\017\006\026\022" +
    "\015\024\025\025\016\026\021\027\011\031\007\032\010" +
    "\033\020\034\034\035\013\037\022\001\002\000\010\002" +
    "\ufffe\012\ufffe\036\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\034\002\032\003\023\004\027\005\003\006" +
    "\005\007\035\010\022\011\026\012\004\013\034\014\013" +
    "\015\030\016\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\125\003" +
    "\023\004\027\005\003\006\005\007\035\010\022\011\026" +
    "\012\004\013\034\014\013\015\030\016\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\107\001\001\000\034\002\106\003\023\004\027\005" +
    "\003\006\005\007\035\010\022\011\026\012\004\013\034" +
    "\014\013\015\030\016\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\065\003\023\004\027\005\003\006" +
    "\005\007\035\010\022\011\026\012\004\013\034\014\013" +
    "\015\030\016\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\045\001\001\000\002" +
    "\001\001\000\034\002\042\003\023\004\027\005\003\006" +
    "\005\007\035\010\022\011\026\012\004\013\034\014\013" +
    "\015\030\016\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\037\003\023\004\027\005\003\006\005" +
    "\007\035\010\022\011\026\012\004\013\034\014\013\015" +
    "\030\016\011\001\001\000\002\001\001\000\034\002\041" +
    "\003\023\004\027\005\003\006\005\007\035\010\022\011" +
    "\026\012\004\013\034\014\013\015\030\016\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\047\003\023" +
    "\004\027\005\003\006\005\007\035\010\022\011\026\012" +
    "\004\013\034\014\013\015\030\016\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\061\003" +
    "\023\004\027\005\003\006\005\007\035\010\022\011\026" +
    "\012\004\013\034\014\013\015\030\016\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\064\003\023" +
    "\004\027\005\003\006\005\007\035\010\022\011\026\012" +
    "\004\013\034\014\013\015\030\016\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\072\003\023\004\027" +
    "\005\003\006\005\007\035\010\022\011\026\012\004\013" +
    "\034\014\013\015\030\016\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\075\003\023\004\027\005" +
    "\003\006\005\007\035\010\022\011\026\012\004\013\034" +
    "\014\013\015\030\016\011\001\001\000\002\001\001\000" +
    "\034\002\077\003\023\004\027\005\003\006\005\007\035" +
    "\010\022\011\026\012\004\013\034\014\013\015\030\016" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\002\111\003\023\004\027\005\003\006\005\007" +
    "\035\010\022\011\026\012\004\013\034\014\013\015\030" +
    "\016\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\117\003\023\004\027\005\003\006\005\007\035\010" +
    "\022\011\026\012\004\013\034\014\013\015\030\016\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\124\003\023\004\027" +
    "\005\003\006\005\007\035\010\022\011\026\012\004\013" +
    "\034\014\013\015\030\016\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\127\003\023\004\027\005" +
    "\003\006\005\007\035\010\022\011\026\012\004\013\034" +
    "\014\013\015\030\016\011\001\001\000\002\001\001\000" +
    "\034\002\131\003\023\004\027\005\003\006\005\007\035" +
    "\010\022\011\026\012\004\013\034\014\013\015\030\016" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\136\001\001\000" +
    "\002\001\001\000\034\002\140\003\023\004\027\005\003" +
    "\006\005\007\035\010\022\011\026\012\004\013\034\014" +
    "\013\015\030\016\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\146\003\023\004\027\005\003\006\005" +
    "\007\035\010\022\011\026\012\004\013\034\014\013\015" +
    "\030\016\011\001\001\000\002\001\001\000\034\002\150" +
    "\003\023\004\027\005\003\006\005\007\035\010\022\011" +
    "\026\012\004\013\034\014\013\015\030\016\011\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= fichier EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // fichier ::= while FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // fichier ::= for FIN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fichier ::= declaration FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fichier ::= commentaire 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fichier ::= doc FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fichier ::= if FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fichier ::= else FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fichier ::= affect FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fichier ::= retourne FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fichier ::= afficher FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fichier ::= lire FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fichier ::= function FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fichier ::= FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fichier ::= STRING fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fichier ::= SEP fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fichier ::= FIN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param ::= PG TYPE NOM PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param ::= PG TYPE NOM TYPE NOM PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= PG PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // while ::= TQ param ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // for ::= PR param ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration ::= TYPE NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration ::= TYPE NOM AFFECTE STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // commentaire ::= COM fichier FCOM fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("commentaire",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if ::= SI PG STRING PD ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // else ::= SINON PG STRING PD ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // affect ::= NOM AFFECTE STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affect",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // retourne ::= RT STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retourne",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // afficher ::= AFFICH PG STRING PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("afficher",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lire ::= LIR PG PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lire",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function ::= FONCTION SEP TYPE SEP STRING param ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("function",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
