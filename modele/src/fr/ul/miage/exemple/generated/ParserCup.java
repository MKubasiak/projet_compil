
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 09 14:59:35 CET 2017
//----------------------------------------------------

package fr.ul.miage.exemple.generated;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 09 14:59:35 CET 2017
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\017\006\000\002\017\010\000\002\003" +
    "\007\000\002\004\007\000\002\005\004\000\002\005\006" +
    "\000\002\006\005\000\002\010\011\000\002\011\011\000" +
    "\002\012\005\000\002\013\004\000\002\014\006\000\002" +
    "\015\005\000\002\016\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\026\004\027\005\016\020\014\022\023\023" +
    "\015\024\017\027\006\030\010\033\012\035\020\001\002" +
    "\000\004\032\136\001\002\000\004\032\134\001\002\000" +
    "\004\031\133\001\002\000\004\032\131\001\002\000\004" +
    "\007\127\001\002\000\004\032\125\001\002\000\004\031" +
    "\123\001\002\000\004\032\121\001\002\000\004\021\117" +
    "\001\002\000\004\007\111\001\002\000\004\007\040\001" +
    "\002\000\006\020\076\025\075\001\002\000\004\007\072" +
    "\001\002\000\004\032\070\001\002\000\004\032\066\001" +
    "\002\000\004\007\060\001\002\000\004\032\056\001\002" +
    "\000\004\032\055\001\002\000\004\032\053\001\002\000" +
    "\004\007\040\001\002\000\004\002\037\001\002\000\004" +
    "\032\035\001\002\000\004\032\033\001\002\000\026\004" +
    "\027\005\016\020\014\022\023\023\015\024\017\027\006" +
    "\030\010\033\012\035\020\001\002\000\004\002\ufffc\001" +
    "\002\000\026\004\027\005\016\020\014\022\023\023\015" +
    "\024\017\027\006\030\010\033\012\035\020\001\002\000" +
    "\004\002\ufff8\001\002\000\004\002\001\001\002\000\004" +
    "\024\045\001\002\000\004\011\042\001\002\000\004\031" +
    "\043\001\002\000\004\010\044\001\002\000\004\032\ufff2" +
    "\001\002\000\004\020\046\001\002\000\006\006\047\024" +
    "\050\001\002\000\004\011\ufff4\001\002\000\004\020\051" +
    "\001\002\000\004\006\052\001\002\000\004\011\ufff3\001" +
    "\002\000\026\004\027\005\016\020\014\022\023\023\015" +
    "\024\017\027\006\030\010\033\012\035\020\001\002\000" +
    "\004\002\ufff6\001\002\000\004\002\uffff\001\002\000\026" +
    "\004\027\005\016\020\014\022\023\023\015\024\017\027" +
    "\006\030\010\033\012\035\020\001\002\000\004\002\ufffa" +
    "\001\002\000\004\031\061\001\002\000\004\006\062\001" +
    "\002\000\004\011\063\001\002\000\004\031\064\001\002" +
    "\000\004\010\065\001\002\000\004\032\uffed\001\002\000" +
    "\026\004\027\005\016\020\014\022\023\023\015\024\017" +
    "\027\006\030\010\033\012\035\020\001\002\000\004\002" +
    "\000\001\002\000\026\004\027\005\016\020\014\022\023" +
    "\023\015\024\017\027\006\030\010\033\012\035\020\001" +
    "\002\000\004\002\ufffb\001\002\000\004\031\073\001\002" +
    "\000\004\006\074\001\002\000\004\032\uffe9\001\002\000" +
    "\004\007\040\001\002\000\006\021\077\032\ufff0\001\002" +
    "\000\004\031\100\001\002\000\004\032\uffef\001\002\000" +
    "\004\011\102\001\002\000\004\031\103\001\002\000\004" +
    "\010\104\001\002\000\004\032\uffe7\001\002\000\004\011" +
    "\106\001\002\000\004\031\107\001\002\000\004\010\110" +
    "\001\002\000\004\032\ufff1\001\002\000\004\031\112\001" +
    "\002\000\004\006\113\001\002\000\004\011\114\001\002" +
    "\000\004\031\115\001\002\000\004\010\116\001\002\000" +
    "\004\032\uffec\001\002\000\004\031\120\001\002\000\004" +
    "\032\uffeb\001\002\000\026\004\027\005\016\020\014\022" +
    "\023\023\015\024\017\027\006\030\010\033\012\035\020" +
    "\001\002\000\004\002\ufff7\001\002\000\004\034\124\001" +
    "\002\000\004\032\uffee\001\002\000\026\004\027\005\016" +
    "\020\014\022\023\023\015\024\017\027\006\030\010\033" +
    "\012\035\020\001\002\000\004\002\ufff5\001\002\000\004" +
    "\006\130\001\002\000\004\032\uffe8\001\002\000\026\004" +
    "\027\005\016\020\014\022\023\023\015\024\017\027\006" +
    "\030\010\033\012\035\020\001\002\000\004\002\ufffd\001" +
    "\002\000\004\032\uffea\001\002\000\026\004\027\005\016" +
    "\020\014\022\023\023\015\024\017\027\006\030\010\033" +
    "\012\035\020\001\002\000\004\002\ufff9\001\002\000\026" +
    "\004\027\005\016\020\014\022\023\023\015\024\017\027" +
    "\006\030\010\033\012\035\020\001\002\000\004\002\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\034\002\027\003\021\004\024\005\003\006" +
    "\006\007\031\010\020\011\023\012\004\013\030\014\012" +
    "\015\025\016\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\033\003\021\004\024\005\003\006\006\007\031\010" +
    "\020\011\023\012\004\013\030\014\012\015\025\016\010" +
    "\001\001\000\002\001\001\000\034\002\035\003\021\004" +
    "\024\005\003\006\006\007\031\010\020\011\023\012\004" +
    "\013\030\014\012\015\025\016\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\053\003\021\004\024\005\003\006\006\007\031\010\020" +
    "\011\023\012\004\013\030\014\012\015\025\016\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\056" +
    "\003\021\004\024\005\003\006\006\007\031\010\020\011" +
    "\023\012\004\013\030\014\012\015\025\016\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\066\003\021\004\024\005\003\006" +
    "\006\007\031\010\020\011\023\012\004\013\030\014\012" +
    "\015\025\016\010\001\001\000\002\001\001\000\034\002" +
    "\070\003\021\004\024\005\003\006\006\007\031\010\020" +
    "\011\023\012\004\013\030\014\012\015\025\016\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\121\003" +
    "\021\004\024\005\003\006\006\007\031\010\020\011\023" +
    "\012\004\013\030\014\012\015\025\016\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\125\003\021\004\024\005\003\006\006\007\031\010" +
    "\020\011\023\012\004\013\030\014\012\015\025\016\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\131\003\021\004\024\005\003\006\006" +
    "\007\031\010\020\011\023\012\004\013\030\014\012\015" +
    "\025\016\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\002\134\003\021\004\024\005\003\006\006\007" +
    "\031\010\020\011\023\012\004\013\030\014\012\015\025" +
    "\016\010\001\001\000\002\001\001\000\034\002\136\003" +
    "\021\004\024\005\003\006\006\007\031\010\020\011\023" +
    "\012\004\013\030\014\012\015\025\016\010\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function ::= TYPE FONCTION param ACG STRING ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("function",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lire ::= LIR PG PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lire",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // afficher ::= AFFICH PG STRING PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("afficher",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // retourne ::= RT STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retourne",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // affect ::= NOM AFFECTE STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affect",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // else ::= SINON PG STRING PD ACG STRING ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // if ::= SI PG STRING PD ACG STRING ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // commentaire ::= COM STRING FCOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("commentaire",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration ::= TYPE NOM AFFECTE STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= TYPE NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // for ::= PR param ACG STRING ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // while ::= TQ param ACG STRING ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param ::= PG TYPE NOM TYPE NOM PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param ::= PG TYPE NOM PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fichier ::= function FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fichier ::= lire FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fichier ::= afficher FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fichier ::= retourne FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fichier ::= affect FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fichier ::= else FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fichier ::= if FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fichier ::= doc FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fichier ::= commentaire FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fichier ::= declaration FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // fichier ::= for FIN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // fichier ::= while FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= fichier EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

