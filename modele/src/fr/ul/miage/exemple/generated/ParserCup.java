
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.ul.miage.exemple.generated;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\002\004" +
    "\000\002\002\004\000\002\002\004\000\002\002\004\000" +
    "\002\002\004\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\017\006\000\002\017\010" +
    "\000\002\017\004\000\002\003\007\000\002\004\007\000" +
    "\002\005\004\000\002\005\006\000\002\006\006\000\002" +
    "\010\011\000\002\011\011\000\002\012\005\000\002\013" +
    "\004\000\002\014\006\000\002\015\005\000\002\016\013" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\036\004\032\005\017\006\026\022\015\024" +
    "\025\025\016\026\021\027\011\031\007\032\010\033\020" +
    "\034\034\035\013\037\022\001\002\000\036\004\032\005" +
    "\017\006\026\022\015\024\025\025\016\026\021\027\011" +
    "\031\007\032\010\033\020\034\034\035\013\037\022\001" +
    "\002\000\036\004\032\005\017\006\026\022\015\024\025" +
    "\025\016\026\021\027\011\031\007\032\010\033\020\034" +
    "\034\035\013\037\022\001\002\000\010\002\ufffd\012\ufffd" +
    "\036\ufffd\001\002\000\004\033\135\001\002\000\004\011" +
    "\133\001\002\000\004\006\123\001\002\000\036\004\032" +
    "\005\017\006\026\022\015\024\025\025\016\026\021\027" +
    "\011\031\007\032\010\033\020\034\034\035\013\037\022" +
    "\001\002\000\036\004\032\005\017\006\026\022\015\024" +
    "\025\025\016\026\021\027\011\031\007\032\010\033\020" +
    "\034\034\035\013\037\022\001\002\000\036\004\032\005" +
    "\017\006\026\022\015\024\025\025\016\026\021\027\011" +
    "\031\007\032\010\033\020\034\034\035\013\037\022\001" +
    "\002\000\004\023\114\001\002\000\004\011\106\001\002" +
    "\000\004\011\043\001\002\000\036\004\032\005\017\006" +
    "\026\022\015\024\025\025\016\026\021\027\011\031\007" +
    "\032\010\033\020\034\034\035\013\037\022\001\002\000" +
    "\004\022\076\001\002\000\004\011\073\001\002\000\036" +
    "\004\032\005\017\006\026\022\015\024\025\025\016\026" +
    "\021\027\011\031\007\032\010\033\020\034\034\035\013" +
    "\037\022\001\002\000\036\004\032\005\017\006\026\022" +
    "\015\024\025\025\016\026\021\027\011\031\007\032\010" +
    "\033\020\034\034\035\013\037\022\001\002\000\004\011" +
    "\063\001\002\000\036\004\032\005\017\006\026\022\015" +
    "\024\025\025\016\026\021\027\011\031\007\032\010\033" +
    "\020\034\034\035\013\037\022\001\002\000\036\004\032" +
    "\005\017\006\026\022\015\024\025\025\016\026\021\027" +
    "\011\031\007\032\010\033\020\034\034\035\013\037\022" +
    "\001\002\000\036\004\032\005\017\006\026\022\015\024" +
    "\025\025\016\026\021\027\011\031\007\032\010\033\020" +
    "\034\034\035\013\037\022\001\002\000\036\004\032\005" +
    "\017\006\026\022\015\024\025\025\016\026\021\027\011" +
    "\031\007\032\010\033\020\034\034\035\013\037\022\001" +
    "\002\000\004\011\043\001\002\000\004\002\042\001\002" +
    "\000\044\002\ufff1\004\032\005\017\006\026\012\ufff1\022" +
    "\015\024\025\025\016\026\021\027\011\031\007\032\010" +
    "\033\020\034\034\035\013\036\ufff1\037\022\001\002\000" +
    "\036\004\032\005\017\006\026\022\015\024\025\025\016" +
    "\026\021\027\011\031\007\032\010\033\020\034\034\035" +
    "\013\037\022\001\002\000\036\004\032\005\017\006\026" +
    "\022\015\024\025\025\016\026\021\027\011\031\007\032" +
    "\010\033\020\034\034\035\013\037\022\001\002\000\010" +
    "\002\ufffc\012\ufffc\036\ufffc\001\002\000\010\002\ufff8\012" +
    "\ufff8\036\ufff8\001\002\000\010\002\ufff4\012\ufff4\036\ufff4" +
    "\001\002\000\004\002\001\001\002\000\006\007\050\026" +
    "\051\001\002\000\004\013\045\001\002\000\036\004\032" +
    "\005\017\006\026\022\015\024\025\025\016\026\021\027" +
    "\011\031\007\032\010\033\020\034\034\035\013\037\022" +
    "\001\002\000\004\012\047\001\002\000\036\004\uffed\005" +
    "\uffed\006\uffed\022\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\037\uffed\001" +
    "\002\000\004\013\uffee\001\002\000\004\022\052\001\002" +
    "\000\006\007\053\026\054\001\002\000\004\013\ufff0\001" +
    "\002\000\004\022\055\001\002\000\004\007\056\001\002" +
    "\000\004\013\uffef\001\002\000\010\002\ufff6\012\ufff6\036" +
    "\ufff6\001\002\000\010\002\uffff\012\uffff\036\uffff\001\002" +
    "\000\010\002\ufffa\012\ufffa\036\ufffa\001\002\000\010\002" +
    "\ufff2\012\ufff2\036\ufff2\001\002\000\004\033\064\001\002" +
    "\000\004\007\065\001\002\000\004\013\066\001\002\000" +
    "\036\004\032\005\017\006\026\022\015\024\025\025\016" +
    "\026\021\027\011\031\007\032\010\033\020\034\034\035" +
    "\013\037\022\001\002\000\004\012\070\001\002\000\036" +
    "\004\uffe8\005\uffe8\006\uffe8\022\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\037\uffe8\001\002\000\010\002\000\012\000\036\000\001" +
    "\002\000\010\002\ufffb\012\ufffb\036\ufffb\001\002\000\004" +
    "\033\074\001\002\000\004\007\075\001\002\000\036\004" +
    "\uffe4\005\uffe4\006\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\037" +
    "\uffe4\001\002\000\040\004\uffeb\005\uffeb\006\uffeb\022\uffeb" +
    "\023\077\024\uffeb\025\uffeb\026\uffeb\027\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\037\uffeb\001\002\000\004" +
    "\033\100\001\002\000\036\004\uffea\005\uffea\006\uffea\022" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\035\uffea\037\uffea\001\002\000\010\002" +
    "\ufff3\012\ufff3\036\ufff3\001\002\000\004\013\103\001\002" +
    "\000\036\004\032\005\017\006\026\022\015\024\025\025" +
    "\016\026\021\027\011\031\007\032\010\033\020\034\034" +
    "\035\013\037\022\001\002\000\004\012\105\001\002\000" +
    "\036\004\uffec\005\uffec\006\uffec\022\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\037\uffec\001\002\000\004\033\107\001\002\000\004" +
    "\007\110\001\002\000\004\013\111\001\002\000\036\004" +
    "\032\005\017\006\026\022\015\024\025\025\016\026\021" +
    "\027\011\031\007\032\010\033\020\034\034\035\013\037" +
    "\022\001\002\000\004\012\113\001\002\000\036\004\uffe7" +
    "\005\uffe7\006\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\037\uffe7" +
    "\001\002\000\004\033\115\001\002\000\036\004\uffe6\005" +
    "\uffe6\006\uffe6\022\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\037\uffe6\001" +
    "\002\000\010\002\ufff7\012\ufff7\036\ufff7\001\002\000\004" +
    "\036\120\001\002\000\036\004\032\005\017\006\026\022" +
    "\015\024\025\025\016\026\021\027\011\031\007\032\010" +
    "\033\020\034\034\035\013\037\022\001\002\000\010\002" +
    "\uffe9\012\uffe9\036\uffe9\001\002\000\010\002\ufff5\012\ufff5" +
    "\036\ufff5\001\002\000\004\026\124\001\002\000\004\006" +
    "\125\001\002\000\004\033\126\001\002\000\004\011\043" +
    "\001\002\000\004\013\130\001\002\000\036\004\032\005" +
    "\017\006\026\022\015\024\025\025\016\026\021\027\011" +
    "\031\007\032\010\033\020\034\034\035\013\037\022\001" +
    "\002\000\004\012\132\001\002\000\036\004\uffe2\005\uffe2" +
    "\006\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2\001\002" +
    "\000\004\007\134\001\002\000\036\004\uffe3\005\uffe3\006" +
    "\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\037\uffe3\001\002\000" +
    "\036\004\uffe5\005\uffe5\006\uffe5\022\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\037\uffe5\001\002\000\010\002\ufff9\012\ufff9\036\ufff9" +
    "\001\002\000\010\002\ufffe\012\ufffe\036\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\034\002\032\003\023\004\027\005\003\006" +
    "\005\007\035\010\022\011\026\012\004\013\034\014\013" +
    "\015\030\016\011\001\001\000\034\002\136\003\023\004" +
    "\027\005\003\006\005\007\035\010\022\011\026\012\004" +
    "\013\034\014\013\015\030\016\011\001\001\000\034\002" +
    "\135\003\023\004\027\005\003\006\005\007\035\010\022" +
    "\011\026\012\004\013\034\014\013\015\030\016\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\121\003\023\004\027\005" +
    "\003\006\005\007\035\010\022\011\026\012\004\013\034" +
    "\014\013\015\030\016\011\001\001\000\034\002\116\003" +
    "\023\004\027\005\003\006\005\007\035\010\022\011\026" +
    "\012\004\013\034\014\013\015\030\016\011\001\001\000" +
    "\034\002\115\003\023\004\027\005\003\006\005\007\035" +
    "\010\022\011\026\012\004\013\034\014\013\015\030\016" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\101\001\001\000\034\002\100\003\023\004\027\005" +
    "\003\006\005\007\035\010\022\011\026\012\004\013\034" +
    "\014\013\015\030\016\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\071\003\023\004\027\005\003" +
    "\006\005\007\035\010\022\011\026\012\004\013\034\014" +
    "\013\015\030\016\011\001\001\000\034\002\070\003\023" +
    "\004\027\005\003\006\005\007\035\010\022\011\026\012" +
    "\004\013\034\014\013\015\030\016\011\001\001\000\002" +
    "\001\001\000\034\002\061\003\023\004\027\005\003\006" +
    "\005\007\035\010\022\011\026\012\004\013\034\014\013" +
    "\015\030\016\011\001\001\000\034\002\060\003\023\004" +
    "\027\005\003\006\005\007\035\010\022\011\026\012\004" +
    "\013\034\014\013\015\030\016\011\001\001\000\034\002" +
    "\057\003\023\004\027\005\003\006\005\007\035\010\022" +
    "\011\026\012\004\013\034\014\013\015\030\016\011\001" +
    "\001\000\034\002\056\003\023\004\027\005\003\006\005" +
    "\007\035\010\022\011\026\012\004\013\034\014\013\015" +
    "\030\016\011\001\001\000\004\017\043\001\001\000\002" +
    "\001\001\000\034\002\040\003\023\004\027\005\003\006" +
    "\005\007\035\010\022\011\026\012\004\013\034\014\013" +
    "\015\030\016\011\001\001\000\034\002\037\003\023\004" +
    "\027\005\003\006\005\007\035\010\022\011\026\012\004" +
    "\013\034\014\013\015\030\016\011\001\001\000\034\002" +
    "\036\003\023\004\027\005\003\006\005\007\035\010\022" +
    "\011\026\012\004\013\034\014\013\015\030\016\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\045\003\023\004\027\005\003\006\005\007\035" +
    "\010\022\011\026\012\004\013\034\014\013\015\030\016" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\066\003\023\004\027\005\003\006" +
    "\005\007\035\010\022\011\026\012\004\013\034\014\013" +
    "\015\030\016\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\103\003\023\004\027\005\003\006" +
    "\005\007\035\010\022\011\026\012\004\013\034\014\013" +
    "\015\030\016\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\002\111\003\023\004\027\005\003\006\005\007" +
    "\035\010\022\011\026\012\004\013\034\014\013\015\030" +
    "\016\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\120\003\023\004\027\005\003\006" +
    "\005\007\035\010\022\011\026\012\004\013\034\014\013" +
    "\015\030\016\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\126\001\001\000\002\001\001\000\034\002" +
    "\130\003\023\004\027\005\003\006\005\007\035\010\022" +
    "\011\026\012\004\013\034\014\013\015\030\016\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= fichier EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // fichier ::= while fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // fichier ::= for fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fichier ::= declaration fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fichier ::= commentaire 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fichier ::= doc fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fichier ::= if fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fichier ::= else fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fichier ::= affect fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fichier ::= retourne fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fichier ::= afficher fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fichier ::= lire fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fichier ::= function fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fichier ::= FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fichier ::= STRING fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fichier ::= SEP fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fichier ::= FIN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param ::= PG TYPE NOM PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param ::= PG TYPE NOM TYPE NOM PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= PG PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // while ::= TQ param ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // for ::= PR param ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration ::= TYPE NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration ::= TYPE NOM AFFECTE STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // commentaire ::= COM fichier FCOM fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("commentaire",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if ::= SI PG STRING PD ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // else ::= SINON PG STRING PD ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // affect ::= NOM AFFECTE STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affect",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // retourne ::= RT STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retourne",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // afficher ::= AFFICH PG STRING PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("afficher",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lire ::= LIR PG PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lire",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function ::= FONCTION SEP TYPE SEP STRING param ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("function",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
