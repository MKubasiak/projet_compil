
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.ul.miage.exemple.generated;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\002\004" +
    "\000\002\002\004\000\002\002\004\000\002\002\004\000" +
    "\002\002\004\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\017\006\000\002\017\010\000\002\017\004" +
    "\000\002\003\007\000\002\004\007\000\002\005\004\000" +
    "\002\005\006\000\002\006\006\000\002\010\011\000\002" +
    "\011\011\000\002\012\005\000\002\013\004\000\002\014" +
    "\006\000\002\015\005\000\002\016\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\034\004\031\005\017\021\015\023\025\024" +
    "\016\025\021\026\011\030\006\031\010\032\020\033\033" +
    "\034\013\036\022\001\002\000\034\004\031\005\017\021" +
    "\015\023\025\024\016\025\021\026\011\030\006\031\010" +
    "\032\020\033\033\034\013\036\022\001\002\000\034\004" +
    "\031\005\017\021\015\023\025\024\016\025\021\026\011" +
    "\030\006\031\010\032\020\033\033\034\013\036\022\001" +
    "\002\000\004\032\131\001\002\000\010\002\ufffd\011\ufffd" +
    "\035\ufffd\001\002\000\004\010\127\001\002\000\004\025" +
    "\121\001\002\000\034\004\031\005\017\021\015\023\025" +
    "\024\016\025\021\026\011\030\006\031\010\032\020\033" +
    "\033\034\013\036\022\001\002\000\034\004\031\005\017" +
    "\021\015\023\025\024\016\025\021\026\011\030\006\031" +
    "\010\032\020\033\033\034\013\036\022\001\002\000\034" +
    "\004\031\005\017\021\015\023\025\024\016\025\021\026" +
    "\011\030\006\031\010\032\020\033\033\034\013\036\022" +
    "\001\002\000\004\022\112\001\002\000\004\010\104\001" +
    "\002\000\004\010\042\001\002\000\034\004\031\005\017" +
    "\021\015\023\025\024\016\025\021\026\011\030\006\031" +
    "\010\032\020\033\033\034\013\036\022\001\002\000\004" +
    "\021\074\001\002\000\004\010\071\001\002\000\034\004" +
    "\031\005\017\021\015\023\025\024\016\025\021\026\011" +
    "\030\006\031\010\032\020\033\033\034\013\036\022\001" +
    "\002\000\034\004\031\005\017\021\015\023\025\024\016" +
    "\025\021\026\011\030\006\031\010\032\020\033\033\034" +
    "\013\036\022\001\002\000\004\010\061\001\002\000\034" +
    "\004\031\005\017\021\015\023\025\024\016\025\021\026" +
    "\011\030\006\031\010\032\020\033\033\034\013\036\022" +
    "\001\002\000\034\004\031\005\017\021\015\023\025\024" +
    "\016\025\021\026\011\030\006\031\010\032\020\033\033" +
    "\034\013\036\022\001\002\000\034\004\031\005\017\021" +
    "\015\023\025\024\016\025\021\026\011\030\006\031\010" +
    "\032\020\033\033\034\013\036\022\001\002\000\004\010" +
    "\042\001\002\000\004\002\041\001\002\000\042\002\ufff2" +
    "\004\031\005\017\011\ufff2\021\015\023\025\024\016\025" +
    "\021\026\011\030\006\031\010\032\020\033\033\034\013" +
    "\035\ufff2\036\022\001\002\000\034\004\031\005\017\021" +
    "\015\023\025\024\016\025\021\026\011\030\006\031\010" +
    "\032\020\033\033\034\013\036\022\001\002\000\034\004" +
    "\031\005\017\021\015\023\025\024\016\025\021\026\011" +
    "\030\006\031\010\032\020\033\033\034\013\036\022\001" +
    "\002\000\010\002\ufffc\011\ufffc\035\ufffc\001\002\000\010" +
    "\002\ufff8\011\ufff8\035\ufff8\001\002\000\010\002\ufff4\011" +
    "\ufff4\035\ufff4\001\002\000\004\002\001\001\002\000\006" +
    "\006\047\025\050\001\002\000\004\012\044\001\002\000" +
    "\034\004\031\005\017\021\015\023\025\024\016\025\021" +
    "\026\011\030\006\031\010\032\020\033\033\034\013\036" +
    "\022\001\002\000\004\011\046\001\002\000\034\004\uffee" +
    "\005\uffee\021\uffee\023\uffee\024\uffee\025\uffee\026\uffee\030" +
    "\uffee\031\uffee\032\uffee\033\uffee\034\uffee\036\uffee\001\002" +
    "\000\004\012\uffef\001\002\000\004\021\051\001\002\000" +
    "\006\006\052\025\053\001\002\000\004\012\ufff1\001\002" +
    "\000\004\021\054\001\002\000\004\006\055\001\002\000" +
    "\004\012\ufff0\001\002\000\010\002\ufff6\011\ufff6\035\ufff6" +
    "\001\002\000\010\002\uffff\011\uffff\035\uffff\001\002\000" +
    "\010\002\ufffa\011\ufffa\035\ufffa\001\002\000\004\032\062" +
    "\001\002\000\004\006\063\001\002\000\004\012\064\001" +
    "\002\000\034\004\031\005\017\021\015\023\025\024\016" +
    "\025\021\026\011\030\006\031\010\032\020\033\033\034" +
    "\013\036\022\001\002\000\004\011\066\001\002\000\034" +
    "\004\uffe9\005\uffe9\021\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9" +
    "\001\002\000\010\002\000\011\000\035\000\001\002\000" +
    "\010\002\ufffb\011\ufffb\035\ufffb\001\002\000\004\032\072" +
    "\001\002\000\004\006\073\001\002\000\034\004\uffe5\005" +
    "\uffe5\021\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\036\uffe5\001\002\000" +
    "\036\004\uffec\005\uffec\021\uffec\022\075\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\036\uffec\001\002\000\004\032\076\001\002\000\034" +
    "\004\uffeb\005\uffeb\021\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\036\uffeb" +
    "\001\002\000\010\002\ufff3\011\ufff3\035\ufff3\001\002\000" +
    "\004\012\101\001\002\000\034\004\031\005\017\021\015" +
    "\023\025\024\016\025\021\026\011\030\006\031\010\032" +
    "\020\033\033\034\013\036\022\001\002\000\004\011\103" +
    "\001\002\000\034\004\uffed\005\uffed\021\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\030\uffed\031\uffed\032\uffed\033\uffed" +
    "\034\uffed\036\uffed\001\002\000\004\032\105\001\002\000" +
    "\004\006\106\001\002\000\004\012\107\001\002\000\034" +
    "\004\031\005\017\021\015\023\025\024\016\025\021\026" +
    "\011\030\006\031\010\032\020\033\033\034\013\036\022" +
    "\001\002\000\004\011\111\001\002\000\034\004\uffe8\005" +
    "\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\036\uffe8\001\002\000" +
    "\004\032\113\001\002\000\034\004\uffe7\005\uffe7\021\uffe7" +
    "\023\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\036\uffe7\001\002\000\010\002\ufff7" +
    "\011\ufff7\035\ufff7\001\002\000\004\035\116\001\002\000" +
    "\034\004\031\005\017\021\015\023\025\024\016\025\021" +
    "\026\011\030\006\031\010\032\020\033\033\034\013\036" +
    "\022\001\002\000\010\002\uffea\011\uffea\035\uffea\001\002" +
    "\000\010\002\ufff5\011\ufff5\035\ufff5\001\002\000\004\032" +
    "\122\001\002\000\004\010\042\001\002\000\004\012\124" +
    "\001\002\000\034\004\031\005\017\021\015\023\025\024" +
    "\016\025\021\026\011\030\006\031\010\032\020\033\033" +
    "\034\013\036\022\001\002\000\004\011\126\001\002\000" +
    "\034\004\uffe3\005\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\036" +
    "\uffe3\001\002\000\004\006\130\001\002\000\034\004\uffe4" +
    "\005\uffe4\021\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\036\uffe4\001\002" +
    "\000\034\004\uffe6\005\uffe6\021\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\036\uffe6\001\002\000\010\002\ufff9\011\ufff9\035\ufff9\001" +
    "\002\000\010\002\ufffe\011\ufffe\035\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\034\002\031\003\023\004\026\005\003\006" +
    "\006\007\034\010\022\011\025\012\004\013\033\014\013" +
    "\015\027\016\011\001\001\000\034\002\132\003\023\004" +
    "\026\005\003\006\006\007\034\010\022\011\025\012\004" +
    "\013\033\014\013\015\027\016\011\001\001\000\034\002" +
    "\131\003\023\004\026\005\003\006\006\007\034\010\022" +
    "\011\025\012\004\013\033\014\013\015\027\016\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\117\003\023\004\026\005" +
    "\003\006\006\007\034\010\022\011\025\012\004\013\033" +
    "\014\013\015\027\016\011\001\001\000\034\002\114\003" +
    "\023\004\026\005\003\006\006\007\034\010\022\011\025" +
    "\012\004\013\033\014\013\015\027\016\011\001\001\000" +
    "\034\002\113\003\023\004\026\005\003\006\006\007\034" +
    "\010\022\011\025\012\004\013\033\014\013\015\027\016" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\077\001\001\000\034\002\076\003\023\004\026\005" +
    "\003\006\006\007\034\010\022\011\025\012\004\013\033" +
    "\014\013\015\027\016\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\067\003\023\004\026\005\003" +
    "\006\006\007\034\010\022\011\025\012\004\013\033\014" +
    "\013\015\027\016\011\001\001\000\034\002\066\003\023" +
    "\004\026\005\003\006\006\007\034\010\022\011\025\012" +
    "\004\013\033\014\013\015\027\016\011\001\001\000\002" +
    "\001\001\000\034\002\057\003\023\004\026\005\003\006" +
    "\006\007\034\010\022\011\025\012\004\013\033\014\013" +
    "\015\027\016\011\001\001\000\034\002\056\003\023\004" +
    "\026\005\003\006\006\007\034\010\022\011\025\012\004" +
    "\013\033\014\013\015\027\016\011\001\001\000\034\002" +
    "\055\003\023\004\026\005\003\006\006\007\034\010\022" +
    "\011\025\012\004\013\033\014\013\015\027\016\011\001" +
    "\001\000\004\017\042\001\001\000\002\001\001\000\034" +
    "\002\037\003\023\004\026\005\003\006\006\007\034\010" +
    "\022\011\025\012\004\013\033\014\013\015\027\016\011" +
    "\001\001\000\034\002\036\003\023\004\026\005\003\006" +
    "\006\007\034\010\022\011\025\012\004\013\033\014\013" +
    "\015\027\016\011\001\001\000\034\002\035\003\023\004" +
    "\026\005\003\006\006\007\034\010\022\011\025\012\004" +
    "\013\033\014\013\015\027\016\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\044\003" +
    "\023\004\026\005\003\006\006\007\034\010\022\011\025" +
    "\012\004\013\033\014\013\015\027\016\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\064\003\023" +
    "\004\026\005\003\006\006\007\034\010\022\011\025\012" +
    "\004\013\033\014\013\015\027\016\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\101\003\023" +
    "\004\026\005\003\006\006\007\034\010\022\011\025\012" +
    "\004\013\033\014\013\015\027\016\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\107\003\023\004\026" +
    "\005\003\006\006\007\034\010\022\011\025\012\004\013" +
    "\033\014\013\015\027\016\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\116\003\023" +
    "\004\026\005\003\006\006\007\034\010\022\011\025\012" +
    "\004\013\033\014\013\015\027\016\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\122\001\001\000\002\001\001\000\034\002\124\003\023" +
    "\004\026\005\003\006\006\007\034\010\022\011\025\012" +
    "\004\013\033\014\013\015\027\016\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= fichier EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // fichier ::= while fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // fichier ::= for fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fichier ::= declaration fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fichier ::= commentaire 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fichier ::= doc fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fichier ::= if fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fichier ::= else fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fichier ::= affect fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fichier ::= retourne fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fichier ::= afficher fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fichier ::= lire fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fichier ::= function fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fichier ::= FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fichier ::= STRING fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fichier ::= FIN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= PG TYPE NOM PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param ::= PG TYPE NOM TYPE NOM PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param ::= PG PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // while ::= TQ param ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // for ::= PR param ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration ::= TYPE NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration ::= TYPE NOM AFFECTE STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // commentaire ::= COM fichier FCOM fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("commentaire",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if ::= SI PG STRING PD ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // else ::= SINON PG STRING PD ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // affect ::= NOM AFFECTE STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affect",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // retourne ::= RT STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retourne",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // afficher ::= AFFICH PG STRING PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("afficher",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lire ::= LIR PG PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lire",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function ::= FONCTION TYPE STRING param ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("function",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
