
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.ul.miage.exemple.generated;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\005\000\002\002\003\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\017\006\000\002\017\010" +
    "\000\002\003\007\000\002\004\007\000\002\005\004\000" +
    "\002\005\006\000\002\006\006\000\002\010\011\000\002" +
    "\011\011\000\002\012\005\000\002\013\004\000\002\014" +
    "\006\000\002\015\005\000\002\016\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\034\004\031\005\016\006\025\022\014\024" +
    "\024\025\015\026\020\031\006\032\010\033\017\034\033" +
    "\035\012\037\021\001\002\000\004\034\143\001\002\000" +
    "\004\034\141\001\002\000\004\033\140\001\002\000\010" +
    "\002\ufffd\012\ufffd\036\ufffd\001\002\000\004\011\136\001" +
    "\002\000\004\034\134\001\002\000\034\004\031\005\016" +
    "\006\025\022\014\024\024\025\015\026\020\031\006\032" +
    "\010\033\017\034\033\035\012\037\021\001\002\000\004" +
    "\034\127\001\002\000\004\023\125\001\002\000\004\011" +
    "\117\001\002\000\004\011\044\001\002\000\034\004\031" +
    "\005\016\006\025\022\014\024\024\025\015\026\020\031" +
    "\006\032\010\033\017\034\033\035\012\037\021\001\002" +
    "\000\006\022\103\027\102\001\002\000\004\011\077\001" +
    "\002\000\004\034\075\001\002\000\004\034\073\001\002" +
    "\000\004\011\065\001\002\000\034\004\031\005\016\006" +
    "\025\022\014\024\024\025\015\026\020\031\006\032\010" +
    "\033\017\034\033\035\012\037\021\001\002\000\004\034" +
    "\062\001\002\000\004\034\061\001\002\000\004\034\057" +
    "\001\002\000\004\011\044\001\002\000\004\002\043\001" +
    "\002\000\042\002\ufff1\004\031\005\016\006\025\012\ufff1" +
    "\022\014\024\024\025\015\026\020\031\006\032\010\033" +
    "\017\034\033\035\012\036\ufff1\037\021\001\002\000\004" +
    "\034\040\001\002\000\004\034\036\001\002\000\034\004" +
    "\031\005\016\006\025\022\014\024\024\025\015\026\020" +
    "\031\006\032\010\033\017\034\033\035\012\037\021\001" +
    "\002\000\010\002\ufffc\012\ufffc\036\ufffc\001\002\000\034" +
    "\004\031\005\016\006\025\022\014\024\024\025\015\026" +
    "\020\031\006\032\010\033\017\034\033\035\012\037\021" +
    "\001\002\000\010\002\ufff8\012\ufff8\036\ufff8\001\002\000" +
    "\010\002\ufff4\012\ufff4\036\ufff4\001\002\000\004\002\001" +
    "\001\002\000\004\026\051\001\002\000\004\013\046\001" +
    "\002\000\034\004\031\005\016\006\025\022\014\024\024" +
    "\025\015\026\020\031\006\032\010\033\017\034\033\035" +
    "\012\037\021\001\002\000\004\012\050\001\002\000\004" +
    "\034\uffee\001\002\000\004\022\052\001\002\000\006\007" +
    "\053\026\054\001\002\000\004\013\ufff0\001\002\000\004" +
    "\022\055\001\002\000\004\007\056\001\002\000\004\013" +
    "\uffef\001\002\000\034\004\031\005\016\006\025\022\014" +
    "\024\024\025\015\026\020\031\006\032\010\033\017\034" +
    "\033\035\012\037\021\001\002\000\010\002\ufff6\012\ufff6" +
    "\036\ufff6\001\002\000\010\002\uffff\012\uffff\036\uffff\001" +
    "\002\000\034\004\031\005\016\006\025\022\014\024\024" +
    "\025\015\026\020\031\006\032\010\033\017\034\033\035" +
    "\012\037\021\001\002\000\010\002\ufffa\012\ufffa\036\ufffa" +
    "\001\002\000\010\002\ufff2\012\ufff2\036\ufff2\001\002\000" +
    "\004\033\066\001\002\000\004\007\067\001\002\000\004" +
    "\013\070\001\002\000\034\004\031\005\016\006\025\022" +
    "\014\024\024\025\015\026\020\031\006\032\010\033\017" +
    "\034\033\035\012\037\021\001\002\000\004\012\072\001" +
    "\002\000\004\034\uffe9\001\002\000\034\004\031\005\016" +
    "\006\025\022\014\024\024\025\015\026\020\031\006\032" +
    "\010\033\017\034\033\035\012\037\021\001\002\000\010" +
    "\002\000\012\000\036\000\001\002\000\034\004\031\005" +
    "\016\006\025\022\014\024\024\025\015\026\020\031\006" +
    "\032\010\033\017\034\033\035\012\037\021\001\002\000" +
    "\010\002\ufffb\012\ufffb\036\ufffb\001\002\000\004\033\100" +
    "\001\002\000\004\007\101\001\002\000\004\034\uffe5\001" +
    "\002\000\004\011\044\001\002\000\006\023\104\034\uffec" +
    "\001\002\000\004\033\105\001\002\000\004\034\uffeb\001" +
    "\002\000\004\013\107\001\002\000\004\033\110\001\002" +
    "\000\004\012\111\001\002\000\004\034\uffe3\001\002\000" +
    "\010\002\ufff3\012\ufff3\036\ufff3\001\002\000\004\013\114" +
    "\001\002\000\034\004\031\005\016\006\025\022\014\024" +
    "\024\025\015\026\020\031\006\032\010\033\017\034\033" +
    "\035\012\037\021\001\002\000\004\012\116\001\002\000" +
    "\004\034\uffed\001\002\000\004\033\120\001\002\000\004" +
    "\007\121\001\002\000\004\013\122\001\002\000\034\004" +
    "\031\005\016\006\025\022\014\024\024\025\015\026\020" +
    "\031\006\032\010\033\017\034\033\035\012\037\021\001" +
    "\002\000\004\012\124\001\002\000\004\034\uffe8\001\002" +
    "\000\004\033\126\001\002\000\004\034\uffe7\001\002\000" +
    "\034\004\031\005\016\006\025\022\014\024\024\025\015" +
    "\026\020\031\006\032\010\033\017\034\033\035\012\037" +
    "\021\001\002\000\010\002\ufff7\012\ufff7\036\ufff7\001\002" +
    "\000\004\036\132\001\002\000\034\004\031\005\016\006" +
    "\025\022\014\024\024\025\015\026\020\031\006\032\010" +
    "\033\017\034\033\035\012\037\021\001\002\000\010\002" +
    "\uffea\012\uffea\036\uffea\001\002\000\034\004\031\005\016" +
    "\006\025\022\014\024\024\025\015\026\020\031\006\032" +
    "\010\033\017\034\033\035\012\037\021\001\002\000\010" +
    "\002\ufff5\012\ufff5\036\ufff5\001\002\000\004\007\137\001" +
    "\002\000\004\034\uffe4\001\002\000\004\034\uffe6\001\002" +
    "\000\034\004\031\005\016\006\025\022\014\024\024\025" +
    "\015\026\020\031\006\032\010\033\017\034\033\035\012" +
    "\037\021\001\002\000\010\002\ufff9\012\ufff9\036\ufff9\001" +
    "\002\000\034\004\031\005\016\006\025\022\014\024\024" +
    "\025\015\026\020\031\006\032\010\033\017\034\033\035" +
    "\012\037\021\001\002\000\010\002\ufffe\012\ufffe\036\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\034\002\031\003\022\004\026\005\003\006" +
    "\006\007\034\010\021\011\025\012\004\013\033\014\012" +
    "\015\027\016\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\130\003\022\004\026\005" +
    "\003\006\006\007\034\010\021\011\025\012\004\013\033" +
    "\014\012\015\027\016\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\112\001\001" +
    "\000\034\002\111\003\022\004\026\005\003\006\006\007" +
    "\034\010\021\011\025\012\004\013\033\014\012\015\027" +
    "\016\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\063\003\022\004\026\005\003\006\006\007\034\010" +
    "\021\011\025\012\004\013\033\014\012\015\027\016\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\044\001\001\000\002\001\001\000\034" +
    "\002\041\003\022\004\026\005\003\006\006\007\034\010" +
    "\021\011\025\012\004\013\033\014\012\015\027\016\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\036\003\022\004\026\005\003\006\006\007\034\010\021" +
    "\011\025\012\004\013\033\014\012\015\027\016\010\001" +
    "\001\000\002\001\001\000\034\002\040\003\022\004\026" +
    "\005\003\006\006\007\034\010\021\011\025\012\004\013" +
    "\033\014\012\015\027\016\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\046\003\022\004\026\005\003" +
    "\006\006\007\034\010\021\011\025\012\004\013\033\014" +
    "\012\015\027\016\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\002\057\003\022\004\026\005\003\006\006\007" +
    "\034\010\021\011\025\012\004\013\033\014\012\015\027" +
    "\016\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\062\003\022\004\026\005\003\006\006\007\034" +
    "\010\021\011\025\012\004\013\033\014\012\015\027\016" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\070\003\022\004\026\005\003\006\006\007\034\010\021" +
    "\011\025\012\004\013\033\014\012\015\027\016\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\073" +
    "\003\022\004\026\005\003\006\006\007\034\010\021\011" +
    "\025\012\004\013\033\014\012\015\027\016\010\001\001" +
    "\000\002\001\001\000\034\002\075\003\022\004\026\005" +
    "\003\006\006\007\034\010\021\011\025\012\004\013\033" +
    "\014\012\015\027\016\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\114\003\022\004\026\005\003\006\006" +
    "\007\034\010\021\011\025\012\004\013\033\014\012\015" +
    "\027\016\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\122\003\022\004\026\005\003\006\006\007\034" +
    "\010\021\011\025\012\004\013\033\014\012\015\027\016" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\002\127\003\022\004" +
    "\026\005\003\006\006\007\034\010\021\011\025\012\004" +
    "\013\033\014\012\015\027\016\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\132\003\022\004\026" +
    "\005\003\006\006\007\034\010\021\011\025\012\004\013" +
    "\033\014\012\015\027\016\010\001\001\000\002\001\001" +
    "\000\034\002\134\003\022\004\026\005\003\006\006\007" +
    "\034\010\021\011\025\012\004\013\033\014\012\015\027" +
    "\016\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\141\003\022" +
    "\004\026\005\003\006\006\007\034\010\021\011\025\012" +
    "\004\013\033\014\012\015\027\016\010\001\001\000\002" +
    "\001\001\000\034\002\143\003\022\004\026\005\003\006" +
    "\006\007\034\010\021\011\025\012\004\013\033\014\012" +
    "\015\027\016\010\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= fichier EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // fichier ::= while FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // fichier ::= for FIN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fichier ::= declaration FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fichier ::= commentaire 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fichier ::= doc FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fichier ::= if FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fichier ::= else FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fichier ::= affect FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fichier ::= retourne FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fichier ::= afficher FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fichier ::= lire FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fichier ::= function FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fichier ::= FIN fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fichier ::= STRING fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fichier ::= SEP fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fichier ::= FIN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fichier",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param ::= PG TYPE NOM PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param ::= PG TYPE NOM TYPE NOM PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // while ::= TQ param ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // for ::= PR param ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration ::= TYPE NOM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration ::= TYPE NOM AFFECTE STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // commentaire ::= COM fichier FCOM fichier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("commentaire",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if ::= SI PG STRING PD ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // else ::= SINON PG STRING PD ACG fichier ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // affect ::= NOM AFFECTE STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affect",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // retourne ::= RT STRING 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retourne",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // afficher ::= AFFICH PG STRING PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("afficher",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lire ::= LIR PG PD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lire",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function ::= TYPE FONCTION param ACG STRING ACD 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("function",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
