/*
 * analyseur syntaxique  du langage exemple-expr:
 * expression arithmetique
 * (voir supports de cours)
 *
 */ 
package fr.ul.miage.exemple.generated;

/* la grammaire */



non terminal programme,function,param, bloc,instruction, declaration, affectation, expression, facteur, atome, lire, retourne, afficher, paramAppel, methodeAppel, if, else, condition, operation, while, main;
terminal PD, PG, ACD, ACG, TYPE, FONCTION, FIN, VIRGULE, IDF, CONSTANTE, DIV, MOINS, PLUS, ET, OU, SI, FOIS, AFFECTE, DP, PR, SINON,
TQ,LIR,RT,AFFICH, PLUSGRAND, EGALE, PLUSPETIT, DIFFERENT, PLUSGRANDEGALE, PLUSPETITEGALE, MAIN;
/* 	TQ : Tant que ; 
	PR : Pour ; 
	PD : Parenth�se droite ; 
	PG : Parenth�se gauche ; 
	ACD : Accolade gauche ; 
	ACG : Accolade droite ; 
	DP : Double point ; 
	IDF : Identifiant
	RT : Retourne */


start with programme;
programme ::= main;
			
main ::= FONCTION TYPE MAIN PG PD ACG bloc ACD;			

function ::= FONCTION TYPE IDF PG param PD ACG bloc ACD;

param ::= 	TYPE IDF |
			TYPE IDF VIRGULE param |
			;

bloc ::= instruction bloc |
			;
			
instruction ::= declaration |
				function |
				affectation |
				retourne |
				afficher |
				if |
				while |
				methodeAppel |
				FIN;
			
while ::= TQ PG condition PD ACG bloc ACD;			
				
if ::= SI PG condition PD ACG bloc ACD else;

else ::= SINON ACG bloc ACD|
			;

condition ::= expression operation expression |
			  expression operation expression ET condition |
			  expression operation expression OU condition;
			  
operation ::= PLUSGRAND |
			  EGALE |
			  PLUSPETIT |
			  DIFFERENT |
			  PLUSGRANDEGALE |
			  PLUSPETITEGALE;
				
retourne ::= RT expression ;

afficher ::= AFFICH PG expression PD;
			 
			 
methodeAppel ::= IDF PG paramAppel PD;
			 
paramAppel ::=  expression |
				expression VIRGULE paramAppel |
				;			 
												
declaration ::= TYPE IDF |
				TYPE IDF VIRGULE declaration |
				IDF VIRGULE declaration |
				TYPE affectation |
				IDF;				

affectation ::= IDF AFFECTE expression;
		   		
expression ::= expression PLUS facteur |
			   expression MOINS facteur |
			   facteur;

facteur ::= facteur DIV atome |
			facteur FOIS atome |
			atome;
			
atome ::= methodeAppel | IDF | CONSTANTE | lire | PG expression PD ;		   		

lire ::= LIR PG PD;



/*
		
			for |
			else |
			lire |
		

for ::= PR PG conditionPour PD ACG programme ACD;
		

*/