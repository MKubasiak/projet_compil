/*
 * analyseur syntaxique  du langage exemple-expr:
 * expression arithmetique
 * (voir supports de cours)
 *
 */ 
package fr.ul.miage.exemple.generated;
import java.util.ArrayList;
import fr.ul.miage.exemple.Arbre_abstrait;

action code{:

	Arbre_abstrait arbre = new Arbre_abstrait();
	ArrayList<String> tab = new ArrayList<String>();
	int nombreInstructions = 0;
	int nombreInstructionsIf = 0;
	int nombreInstructionsFonction = 0;

:}

/* la grammaire */



non terminal programme,function,param, bloc,instruction, declaration, affectation, expression, facteur, atome, lire, retourne, afficher, paramAppel, methodeAppel, if, else, condition, operation, while, main, blocif, blocfonction;
terminal PD, PG, ACD, ACG, TYPE, FONCTION, FIN, VIRGULE, IDF, CONSTANTE, DIV, MOINS, PLUS, ET, OU, SI, FOIS, AFFECTE, DP, PR, SINON,
TQ,LIR,RT,AFFICH, PLUSGRAND, EGALE, PLUSPETIT, DIFFERENT, PLUSGRANDEGALE, PLUSPETITEGALE, MAIN;
/* 	TQ : Tant que ; 
	PR : Pour ; 
	PD : Parenth�se droite ; 
	PG : Parenth�se gauche ; 
	ACD : Accolade gauche ; 
	ACG : Accolade droite ; 
	DP : Double point ; 
	IDF : Identifiant
	RT : Retourne */


start with programme;
programme ::= main {: arbre.afficherListe(); arbre.construireArbre(); arbre.afficherArbre(); :};
			
main ::= FONCTION:f TYPE:t MAIN:main PG PD ACG bloc ACD {: tab.add(f.toString()); tab.add(t.toString()); tab.add(main.toString()); arbre.ajouterInstructionDebut(tab); tab = new ArrayList<String>(); :};			

function ::= FONCTION:f TYPE:t IDF:i PG param PD ACG blocfonction ACD {: tab.add(f.toString()); tab.add(t.toString()); tab.add(i.toString()); arbre.ajouterInstructionAvant(tab,nombreInstructionsFonction); nombreInstructionsFonction=0; nombreInstructions=0; tab = new ArrayList<String>(); :};

param ::= 	TYPE:t IDF:id param {: tab.add(t.toString()); tab.add(id.toString()); tab.add("Parametre"); :} | 
			TYPE:t IDF:id VIRGULE param {: tab.add(t.toString()); tab.add(id.toString()); tab.add("Parametre"); :} 
			| {: arbre.ajouterInstruction(tab); tab = new ArrayList<String>(); :} ;

bloc ::= instruction bloc {: nombreInstructions = nombreInstructions + 1; :}   |
			;

blocif ::= instruction blocif {: nombreInstructionsIf = nombreInstructionsIf + 1; nombreInstructions = nombreInstructions + 1; :} |
			;
			
blocfonction ::= instruction blocfonction {: nombreInstructionsFonction = nombreInstructionsFonction + 1; nombreInstructions = nombreInstructions + 1; :} |
			{: tab.add("finfonction"); arbre.ajouterInstruction(tab); nombreInstructionsFonction = nombreInstructionsFonction + 1; tab = new ArrayList<String>(); :} ;						

instruction ::= declaration |
				function |
				affectation |
				retourne |
				afficher |
				if |
				while |
				methodeAppel |
				FIN;
			
while ::= TQ:tq PG condition PD ACG bloc ACD {: tab.add(tq.toString()); arbre.ajouterInstructionAvant(tab,nombreInstructions); nombreInstructions = 0; tab = new ArrayList<String>(); :};			
				
if ::= SI:si PG condition PD ACG blocif ACD else {: tab.add(si.toString()); arbre.ajouterInstructionAvant(tab,nombreInstructions); nombreInstructions = 0; nombreInstructionsIf = 0; tab = new ArrayList<String>();:} ;

else ::= SINON:sinon ACG bloc ACD {: tab.add("finsi"); tab.add(sinon.toString()); arbre.ajouterInstructionAvant(tab,nombreInstructions-nombreInstructionsIf); tab = new ArrayList<String>(); tab.add("finsinon"); arbre.ajouterInstruction(tab); nombreInstructions = nombreInstructions + 1; tab = new ArrayList<String>();:}|
			{: tab.add("finsi"); arbre.ajouterInstruction(tab); nombreInstructions = nombreInstructions + 1; tab = new ArrayList<String>();:};

condition ::= expression operation expression {: tab.add("Condition"); :} |
			  expression operation expression ET condition {: tab.add("Condition"); :} |
			  expression operation expression OU condition {: tab.add("Condition"); :};
			  
operation ::= PLUSGRAND:pg 		{: tab.add(pg.toString()); :}|
			  EGALE:eg 			{: tab.add(eg.toString()); :}|
			  PLUSPETIT:pp 		{: tab.add(pp.toString()); :}|
			  DIFFERENT:dif 		{: tab.add(dif.toString()); :}|
			  PLUSGRANDEGALE:pge	{: tab.add(pge.toString()); :}|
			  PLUSPETITEGALE:ppe	{: tab.add(ppe.toString()); :};
				
retourne ::= RT:rt expression {: tab.add(rt.toString()); arbre.ajouterInstruction(tab); tab = new ArrayList<String>(); :};

afficher ::= AFFICH:aff PG expression PD {: tab.add(aff.toString()); arbre.ajouterInstruction(tab); tab = new ArrayList<String>(); :};
			 
			 
methodeAppel ::= IDF:id PG paramAppel PD {: tab.add(id.toString()); tab.add("appelMethode"); arbre.ajouterInstruction(tab); tab = new ArrayList<String>(); :};
			 
paramAppel ::=  expression  |
				expression VIRGULE:virg paramAppel {: tab.add(virg.toString()); :}|
				;			 
												
declaration ::= TYPE:ty IDF:id {: tab.add(ty.toString()); tab.add(id.toString()); tab.add("declaration"); arbre.ajouterInstruction(tab); tab = new ArrayList<String>(); :}|
				TYPE:ty IDF:id VIRGULE:virg declaration {: tab.add(ty.toString()); tab.add(id.toString()); tab.add(virg.toString()); tab.add("declaration"); arbre.ajouterInstruction(tab); tab = new ArrayList<String>(); :}|
				IDF:id VIRGULE:virg declaration {: tab.add(id.toString()); tab.add(virg.toString()); tab.add("declaration"); arbre.ajouterInstruction(tab); tab = new ArrayList<String>(); :}|
				TYPE:ty affectation {: tab.add(ty.toString()); tab.add("declaration"); arbre.ajouterInstructionAvant(tab,1); tab = new ArrayList<String>(); :}|
				IDF:id {: tab.add(id.toString()); tab.add("declaration"); :};				

affectation ::= IDF:id AFFECTE:aff expression {: tab.add(aff.toString()); tab.add(id.toString()); tab.add("Affectation"); arbre.ajouterInstruction(tab); tab = new ArrayList<String>();:};
		   		
expression ::= expression:expr PLUS:pl facteur:fact {: tab.add(pl.toString()); tab.add("operation"); :}|
			   expression MOINS:min facteur {: tab.add(min.toString()); tab.add("operation"); :}|
			   facteur;

facteur ::= facteur DIV:div atome {: tab.add(div.toString()); tab.add("operation"); :}|
			facteur FOIS:mult atome {: tab.add(mult.toString()); tab.add("operation"); :}|
			atome;
			
atome ::= methodeAppel 
		| IDF:id 		{: tab.add(id.toString()); :} 
		| CONSTANTE:a 	{: tab.add(a.toString()); :}
		| lire | PG expression PD ;		   		

lire ::= LIR:lir PG PD {: tab.add(lir.toString()); arbre.ajouterInstruction(tab); tab = new ArrayList<String>();:};



/*
		
			for |
			else |
			lire |
		

for ::= PR PG conditionPour PD ACG programme ACD;
		

*/