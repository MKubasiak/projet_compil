/*
 * analyseur syntaxique  du langage exemple-expr:
 * expression arithmetique
 * (voir supports de cours)
 *
 */ 
package fr.ul.miage.exemple.generated;


import java.util.LinkedList;

action code{:

	LinkedList<Object> prog = new LinkedList<>();


	public void ajouterALaListe(String[] tab){
		for(String elem : tab){
			prog.add(elem);
		}
	}

	
	public void showList(){
		for(Object elem : prog){
			System.out.println(elem);
		}
	}

:}

/* la grammaire */



non terminal programme,function,param, bloc,instruction, declaration, affectation, expression, facteur, atome, lire, retourne, afficher, paramAppel, methodeAppel, if, else, condition, operation, while, main;
terminal PD, PG, ACD, ACG, TYPE, FONCTION, FIN, VIRGULE, IDF, CONSTANTE, DIV, MOINS, PLUS, ET, OU, SI, FOIS, AFFECTE, DP, PR, SINON,
TQ,LIR,RT,AFFICH, PLUSGRAND, EGALE, PLUSPETIT, DIFFERENT, PLUSGRANDEGALE, PLUSPETITEGALE, MAIN;
/* 	TQ : Tant que ; 
	PR : Pour ; 
	PD : Parenth�se droite ; 
	PG : Parenth�se gauche ; 
	ACD : Accolade gauche ; 
	ACG : Accolade droite ; 
	DP : Double point ; 
	IDF : Identifiant
	RT : Retourne */


start with programme;
programme ::= main {: showList(); :};
			
main ::= FONCTION:f TYPE MAIN:main PG PD ACG bloc ACD {: ajouterALaListe(new String[]{(String)f,(String)main}); :};			

function ::= FONCTION:f TYPE:t IDF PG param PD ACG bloc ACD {: ajouterALaListe(new String[]{(String)f, (String)t});:};

param ::= 	TYPE:t IDF:id {: ajouterALaListe(new String[]{(String)t, (String)id}); :} | 
			TYPE IDF VIRGULE param |
			;

bloc ::= instruction bloc |
			;
			
instruction ::= declaration |
				function |
				affectation |
				retourne |
				afficher |
				if |
				while |
				methodeAppel |
				FIN;
			
while ::= TQ:tq PG condition PD ACG bloc ACD {: ajouterALaListe(new String[]{(String)tq}); :} ;			
				
if ::= SI:si PG condition PD ACG bloc ACD else {: ajouterALaListe(new String[]{(String)si}); :} ;

else ::= SINON:sinon ACG bloc ACD {: ajouterALaListe(new String[]{(String)sinon}); :}|
			;

condition ::= expression operation expression |
			  expression operation expression ET condition |
			  expression operation expression OU condition;
			  
operation ::= PLUSGRAND:pg 		{: ajouterALaListe(new String[]{(String)pg}); :}|
			  EGALE:eg 			{: ajouterALaListe(new String[]{(String)eg}); :}|
			  PLUSPETIT:pp 		{: ajouterALaListe(new String[]{(String)pp}); :}|
			  DIFFERENT:dif 		{: ajouterALaListe(new String[]{(String)dif}); :}|
			  PLUSGRANDEGALE:pge	{: ajouterALaListe(new String[]{(String)pge}); :}|
			  PLUSPETITEGALE:ppe	{: ajouterALaListe(new String[]{(String)ppe}); :};
				
retourne ::= RT:rt expression {: ajouterALaListe(new String[]{(String)rt}); :};

afficher ::= AFFICH:aff PG expression PD {: ajouterALaListe(new String[]{(String)aff}); :};
			 
			 
methodeAppel ::= IDF:id PG paramAppel PD {: ajouterALaListe(new String[]{"methode", (String)id}); :};
			 
paramAppel ::=  expression |
				expression VIRGULE:virg paramAppel {: ajouterALaListe(new String[]{(String)virg}); :}|
				;			 
												
declaration ::= TYPE:ty IDF:id {: ajouterALaListe(new String[]{"declaration", (String)ty, (String)id}); :}|
				TYPE:ty IDF:id VIRGULE:virg declaration {: ajouterALaListe(new String[]{"declaration", (String)ty, (String)id, (String)virg}); :}|
				IDF:id VIRGULE:virg declaration {: ajouterALaListe(new String[]{"declaration", (String)id, (String)virg }); :}|
				TYPE:ty affectation {: ajouterALaListe(new String[]{"declaration", (String)ty}); :}|
				IDF:id {: ajouterALaListe(new String[]{"declaration", (String)id}); :};				

affectation ::= IDF:id AFFECTE:aff expression  {: ajouterALaListe(new String[]{(String)id, (String)aff}); :};
		   		
expression ::= expression PLUS:pl facteur {: ajouterALaListe(new String[]{(String)pl}); :}|
			   expression MOINS:min facteur {: ajouterALaListe(new String[]{(String)min}); :}|
			   facteur;

facteur ::= facteur DIV:div atome {: ajouterALaListe(new String[]{(String)div}); :}|
			facteur FOIS:mult atome {: ajouterALaListe(new String[]{(String)mult}); :}|
			atome;
			
atome ::= methodeAppel 
		| IDF:id 		{: ajouterALaListe(new String[]{(String)id}); :} 
		| CONSTANTE:a 	{: prog.add(a); :}
		| lire | PG expression PD ;		   		

lire ::= LIR:lir PG PD {: ajouterALaListe(new String[]{(String)lir}); :};



/*
		
			for |
			else |
			lire |
		

for ::= PR PG conditionPour PD ACG programme ACD;
		

*/