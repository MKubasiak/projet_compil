/*
 * analyseur syntaxique  du langage exemple-expr:
 * expression arithmetique
 * (voir supports de cours)
 *
 */ 
package fr.ul.miage.exemple.generated;

import fr.ul.miage.exemple.Arbre_abstrait.java;

action code{:

	Arbre_abstrait arbre = new Arbre_abstrait();	

:}

/* la grammaire */



non terminal programme,function,param, bloc,instruction, declaration, affectation, expression, facteur, atome, lire, retourne, afficher, paramAppel, methodeAppel, if, else, condition, operation, while, main;
terminal PD, PG, ACD, ACG, TYPE, FONCTION, FIN, VIRGULE, IDF, CONSTANTE, DIV, MOINS, PLUS, ET, OU, SI, FOIS, AFFECTE, DP, PR, SINON,
TQ,LIR,RT,AFFICH, PLUSGRAND, EGALE, PLUSPETIT, DIFFERENT, PLUSGRANDEGALE, PLUSPETITEGALE, MAIN;
/* 	TQ : Tant que ; 
	PR : Pour ; 
	PD : Parenth�se droite ; 
	PG : Parenth�se gauche ; 
	ACD : Accolade gauche ; 
	ACG : Accolade droite ; 
	DP : Double point ; 
	IDF : Identifiant
	RT : Retourne */


start with programme;
programme ::= main {: arbre.afficherListe(); :};
			
main ::= FONCTION:f TYPE MAIN:main PG PD ACG bloc ACD {: arbre.ajouterInstruction(new String[]{f.toString(),main.toString()}); :};			

function ::= FONCTION:f TYPE:t IDF PG param PD ACG bloc ACD {: arbre.ajouterInstruction(new String[]{f.toString(), t.toString()});:};

param ::= 	TYPE:t IDF:id {: arbre.ajouterInstruction(new String[]{t.toString(), id.toString()}); :} | 
			TYPE IDF VIRGULE param |
			;

bloc ::= instruction bloc |
			;
			
instruction ::= declaration |
				function |
				affectation |
				retourne |
				afficher |
				if |
				while |
				methodeAppel |
				FIN;
			
while ::= TQ:tq PG condition PD ACG bloc ACD {: arbre.ajouterInstruction(new String[]{tq.toString()}); :} ;			
				
if ::= SI:si PG condition PD ACG bloc ACD else {: arbre.ajouterInstruction(new String[]{si.toString()}); :} ;

else ::= SINON:sinon ACG bloc ACD {: arbre.ajouterInstruction(new String[]{sinon.toString()}); :}|
			;

condition ::= expression operation expression |
			  expression operation expression ET condition |
			  expression operation expression OU condition;
			  
operation ::= PLUSGRAND:pg 		{: arbre.ajouterInstruction(new String[]{pg.toString()}); :}|
			  EGALE:eg 			{: arbre.ajouterInstruction(new String[]{eg.toString()}); :}|
			  PLUSPETIT:pp 		{: arbre.ajouterInstruction(new String[]{pp.toString()}); :}|
			  DIFFERENT:dif 		{: arbre.ajouterInstruction(new String[]{dif.toString()}); :}|
			  PLUSGRANDEGALE:pge	{: arbre.ajouterInstruction(new String[]{pge.toString()}); :}|
			  PLUSPETITEGALE:ppe	{: arbre.ajouterInstruction(new String[]{ppe.toString()}); :};
				
retourne ::= RT:rt expression {: arbre.ajouterInstruction(new String[]{rt.toString()}); :};

afficher ::= AFFICH:aff PG expression PD {: arbre.ajouterInstruction(new String[]{aff.toString()}); :};
			 
			 
methodeAppel ::= IDF:id PG paramAppel PD {: arbre.ajouterInstruction(new String[]{"methode", id.toString()}); :};
			 
paramAppel ::=  expression |
				expression VIRGULE:virg paramAppel {: arbre.ajouterInstruction(new String[]{virg.toString()}); :}|
				;			 
												
declaration ::= TYPE:ty IDF:id {: arbre.ajouterInstruction(new String[]{"declaration", ty.toString(), id.toString()}); :}|
				TYPE:ty IDF:id VIRGULE:virg declaration {: arbre.ajouterInstruction(new String[]{"declaration", ty.toString(), id.toString(), virg.toString()}); :}|
				IDF:id VIRGULE:virg declaration {: arbre.ajouterInstruction(new String[]{"declaration", id.toString(), virg.toString() }); :}|
				TYPE:ty affectation {: arbre.ajouterInstruction(new String[]{"declaration", ty.toString()}); :}|
				IDF:id {: arbre.ajouterInstruction(new String[]{"declaration", id.toString()}); :};				

affectation ::= IDF:id AFFECTE:aff expression  {: arbre.ajouterInstruction(new String[]{id.toString(), aff.toString()}); :};
		   		
expression ::= expression PLUS:pl facteur {: arbre.ajouterInstruction(new String[]{pl.toString()}); :}|
			   expression MOINS:min facteur {: arbre.ajouterInstruction(new String[]{min.toString()}); :}|
			   facteur;

facteur ::= facteur DIV:div atome {: arbre.ajouterInstruction(new String[]{div.toString()}); :}|
			facteur FOIS:mult atome {: arbre.ajouterInstruction(new String[]{mult.toString()}); :}|
			atome;
			
atome ::= methodeAppel 
		| IDF:id 		{: arbre.ajouterInstruction(new String[]{id.toString()}); :} 
		| CONSTANTE:a 	{: arbre.ajouterInstruction(new String[]{a.toString()}); :}
		| lire | PG expression PD ;		   		

lire ::= LIR:lir PG PD {: arbre.ajouterInstruction(new String[]{lir.toString()}); :};



/*
		
			for |
			else |
			lire |
		

for ::= PR PG conditionPour PD ACG programme ACD;
		

*/